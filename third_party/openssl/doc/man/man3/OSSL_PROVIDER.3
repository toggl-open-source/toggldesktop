.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OSSL_PROVIDER 3"
.TH OSSL_PROVIDER 3 "2020-09-17" "3.0.0-alpha7-dev" "OpenSSL"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OSSL_PROVIDER_set_default_search_path,
OSSL_PROVIDER, OSSL_PROVIDER_load, OSSL_PROVIDER_try_load, OSSL_PROVIDER_unload,
OSSL_PROVIDER_available, OSSL_PROVIDER_do_all,
OSSL_PROVIDER_gettable_params, OSSL_PROVIDER_get_params,
OSSL_PROVIDER_query_operation, OSSL_PROVIDER_get0_provider_ctx,
OSSL_PROVIDER_add_builtin, OSSL_PROVIDER_name,
OSSL_PROVIDER_get_capabilities, OSSL_PROVIDER_self_test
\&\- provider routines
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& #include <openssl/provider.h>
\&
\& typedef struct ossl_provider_st OSSL_PROVIDER;
\&
\& void OSSL_PROVIDER_set_default_search_path(OPENSSL_CTX *libctx,
\&                                            const char *path);
\&
\& OSSL_PROVIDER *OSSL_PROVIDER_load(OPENSSL_CTX *libctx, const char *name);
\& OSSL_PROVIDER *OSSL_PROVIDER_try_load(OPENSSL_CTX *libctx, const char *name);
\& int OSSL_PROVIDER_unload(OSSL_PROVIDER *prov);
\& int OSSL_PROVIDER_available(OPENSSL_CTX *libctx, const char *name);
\& int OSSL_PROVIDER_do_all(OPENSSL_CTX *ctx,
\&                          int (*cb)(OSSL_PROVIDER *provider, void *cbdata),
\&                          void *cbdata);
\&
\& const OSSL_PARAM *OSSL_PROVIDER_gettable_params(OSSL_PROVIDER *prov);
\& int OSSL_PROVIDER_get_params(OSSL_PROVIDER *prov, OSSL_PARAM params[]);
\&
\& const OSSL_ALGORITHM *OSSL_PROVIDER_query_operation(const OSSL_PROVIDER *prov,
\&                                                     int operation_id,
\&                                                     int *no_cache);
\& void *OSSL_PROVIDER_get0_provider_ctx(const OSSL_PROVIDER *prov);
\&
\& int OSSL_PROVIDER_add_builtin(OPENSSL_CTX *libctx, const char *name,
\&                               ossl_provider_init_fn *init_fn);
\&
\& const char *OSSL_PROVIDER_name(const OSSL_PROVIDER *prov);
\&
\& int OSSL_PROVIDER_get_capabilities(const OSSL_PROVIDER *prov,
\&                                    const char *capability,
\&                                    OSSL_CALLBACK *cb,
\&                                    void *arg);
\& int OSSL_PROVIDER_self_test(const OSSL_PROVIDER *prov);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fB\s-1OSSL_PROVIDER\s0\fR is a type that holds internal information about
implementation providers (see \fBprovider\fR\|(7) for information on what a
provider is).
A provider can be built in to the application or the OpenSSL
libraries, or can be a loadable module.
The functions described here handle both forms.
.PP
Some of these functions operate within a library context, please see
\&\s-1\fBOPENSSL_CTX\s0\fR\|(3) for further details.
.SS "Functions"
.IX Subsection "Functions"
\&\fBOSSL_PROVIDER_set_default_search_path()\fR specifies the default search \fBpath\fR
that is to be used for looking for providers in the specified \fBlibctx\fR.
If left unspecified, an environment variable and a fall back default value will
be used instead.
.PP
\&\fBOSSL_PROVIDER_add_builtin()\fR is used to add a built in provider to
\&\fB\s-1OSSL_PROVIDER\s0\fR store in the given library context, by associating a
provider name with a provider initialization function.
This name can then be used with \fBOSSL_PROVIDER_load()\fR.
.PP
\&\fBOSSL_PROVIDER_load()\fR loads and initializes a provider.
This may simply initialize a provider that was previously added with
\&\fBOSSL_PROVIDER_add_builtin()\fR and run its given initialization function,
or load a provider module with the given name and run its provider
entry point, \f(CW\*(C`OSSL_provider_init\*(C'\fR.
.PP
\&\fBOSSL_PROVIDER_try_load()\fR functions like \fBOSSL_PROVIDER_load()\fR, except that
it does not disable the fall-back providers if the provider cannot be
loaded and initialized.
If the provider loads successfully, however, the fall-back providers are
disabled.
.PP
\&\fBOSSL_PROVIDER_unload()\fR unloads the given provider.
For a provider added with \fBOSSL_PROVIDER_add_builtin()\fR, this simply
runs its teardown function.
.PP
\&\fBOSSL_PROVIDER_available()\fR checks if a named provider is available
for use.
.PP
\&\fBOSSL_PROVIDER_do_all()\fR iterates over all loaded providers, calling
\&\fIcb\fR for each one, with the current provider in \fIprovider\fR and the
\&\fIcbdata\fR that comes from the caller.
.PP
\&\fBOSSL_PROVIDER_gettable_params()\fR is used to get a provider parameter
descriptor set as a constant \fB\s-1OSSL_PARAM\s0\fR array.
See \s-1\fBOSSL_PARAM\s0\fR\|(3) for more information.
.PP
\&\fBOSSL_PROVIDER_get_params()\fR is used to get provider parameter values.
The caller must prepare the \fB\s-1OSSL_PARAM\s0\fR array before calling this
function, and the variables acting as buffers for this parameter array
should be filled with data when it returns successfully.
.PP
\&\fBOSSL_PROVIDER_self_test()\fR is used to run a provider's self tests on demand.
If the self tests fail then the provider will fail to provide any further
services and algorithms. \fBOSSL_SELF_TEST_set_callback\fR\|(3) may be called
beforehand in order to display diagnostics for the running self tests.
.PP
\&\fBOSSL_PROVIDER_query_operation()\fR calls the provider's \fIquery_operation\fR
function (see \fBprovider\fR\|(7)), if the provider has one. It returns an
array of \fI\s-1OSSL_ALGORITHM\s0\fR for the given \fIoperation_id\fR terminated by an all
\&\s-1NULL OSSL_ALGORITHM\s0 entry. This is considered a low-level function that most
applications should not need to call.
.PP
\&\fBOSSL_PROVIDER_get0_provider_ctx()\fR returns the provider context for the given
provider. The provider context is an opaque handle set by the provider itself
and is passed back to the provider by libcrypto in various function calls.
.PP
If it is permissible to cache references to this array then \fI*no_store\fR is set
to 0 or 1 otherwise. If the array is not cacheable then it is assumed to
have a short lifetime.
.PP
\&\fBOSSL_PROVIDER_name()\fR returns the name of the given provider.
.PP
\&\fBOSSL_PROVIDER_get_capabilities()\fR provides information about the capabilities
supported by the provider specified in \fIprov\fR with the capability name
\&\fIcapability\fR. For each capability of that name supported by the provider it
will call the callback \fIcb\fR and supply a set of \fB\s-1OSSL_PARAM\s0\fRs describing the
capability. It will also pass back the argument \fIarg\fR. For more details about
capabilities and what they can be used for please see
\&\*(L"\s-1CAPABILTIIES\*(R"\s0 in \fBprovider\-base\fR\|(7).
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
\&\fBOSSL_PROVIDER_add()\fR, \fBOSSL_PROVIDER_unload()\fR, \fBOSSL_PROVIDER_get_params()\fR and
\&\fBOSSL_PROVIDER_get_capabilities()\fR return 1 on success, or 0 on error.
.PP
\&\fBOSSL_PROVIDER_load()\fR and \fBOSSL_PROVIDER_try_load()\fR return a pointer to a
provider object on success, or \fB\s-1NULL\s0\fR on error.
.PP
\&\fBOSSL_PROVIDER_available()\fR returns 1 if the named provider is available,
otherwise 0.
.PP
\&\fBOSSL_PROVIDER_gettable_params()\fR returns a pointer to an array
of constant \fB\s-1OSSL_PARAM\s0\fR, or \s-1NULL\s0 if none is provided.
.PP
\&\fBOSSL_PROVIDER_get_params()\fR and returns 1 on success, or 0 on error.
.PP
\&\fBOSSL_PROVIDER_query_operation()\fR returns an array of \s-1OSSL_ALGORITHM\s0 or \s-1NULL\s0 on
error.
.PP
\&\fBOSSL_PROVIDER_self_test()\fR returns 1 if the self tests pass, or 0 on error.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
This demonstrates how to load the provider module \*(L"foo\*(R" and ask for
its build number.
.PP
.Vb 7
\& OSSL_PROVIDER *prov = NULL;
\& const char *build = NULL;
\& size_t built_l = 0;
\& OSSL_PARAM request[] = {
\&     { "build", OSSL_PARAM_UTF8_STRING_PTR, &build, 0, &build_l },
\&     { NULL, 0, NULL, 0, NULL }
\& };
\&
\& if ((prov = OSSL_PROVIDER_load(NULL, "foo")) != NULL
\&     && OSSL_PROVIDER_get_params(prov, request))
\&     printf("Provider \*(Aqfoo\*(Aq build %s\en", build);
\& else
\&     ERR_print_errors_fp(stderr);
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBopenssl\-core.h\fR\|(7), \s-1\fBOPENSSL_CTX\s0\fR\|(3), \fBprovider\fR\|(7)
.SH "HISTORY"
.IX Header "HISTORY"
The type and functions described here were added in OpenSSL 3.0.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2019\-2020 The OpenSSL Project Authors. All Rights Reserved.
.PP
Licensed under the Apache License 2.0 (the \*(L"License\*(R").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file \s-1LICENSE\s0 in the source distribution or at
<https://www.openssl.org/source/license.html>.
